init.theta = best_alpha)
return (combined_model)
}
sj_model <- get_bst_model(sj_train_subtrain, sj_train_subtest)
iq_model <- get_bst_model(iq_train_subtrain, iq_train_subtest)
# plot sj
sj_train$fitted = predict(sj_model, sj_train, type = 'response')
sj_train %>%
mutate(index = as.numeric(row.names(.))) %>%
ggplot(aes(x = index)) + ggtitle("San Jose") +
geom_line(aes(y = total_cases, colour = "total_cases")) +
geom_line(aes(y = fitted, colour = "fitted"))
# plot iq
iq_train$fitted = predict(iq_model, iq_train, type = 'response')
iq_train %>%
mutate(index = as.numeric(row.names(.))) %>%
ggplot(aes(x = index)) + ggtitle("Iquitos") +
geom_line(aes(y = total_cases, colour = "total_cases")) +
geom_line(aes(y = fitted, colour = "fitted"))
# submitting the predictions
tests <- preprocessData('dengue_features_test.csv')
sj_test <- tests[[1]]; iq_test <- tests[[2]]
sj_test$predicted = predict(sj_model , sj_test, type = 'response')
iq_test$predicted = predict(iq_model , iq_test, type = 'response')
submissions = read.csv('submission_format.csv')
inner_join(submissions, rbind(sj_test,iq_test)) %>%
dplyr::select(city, year, weekofyear, total_cases = predicted) ->
predictions
predictions$total_cases %<>% round()
write.csv(predictions, 'submissions/predictions.csv', row.names = FALSE)
## Data Loading
pkgs <- c('tidyverse', 'corrplot', 'magrittr', 'zoo',  'RColorBrewer', 'gridExtra','MASS')
invisible(lapply(pkgs, require, character.only = T))
setwd('J:/Raw/CS/Sem7/DM/project/data/original_data/')
#Train
preprocessData <- function(data_path, labels_path = NULL)
{
# load data
df <- read.csv(data_path)
# features we want
features = c("reanalysis_specific_humidity_g_per_kg", "reanalysis_dew_point_temp_k",
"station_avg_temp_c", "station_min_temp_c", "reanalysis_tdtr_k")
# fill missing values
df[features] %<>% na.locf(fromLast = TRUE)
# add city if labels data aren't provided
if (is.null(labels_path)) features %<>% c("city", "year", "weekofyear")
# select features we want
df <- df[features]
# add labels to dataframe
if (!is.null(labels_path)) df %<>% cbind(read.csv(labels_path))
# filter by city
df_sj <- filter(df, city == 'sj')
df_iq <- filter(df, city == 'iq')
# return a list with the 2 data frames
return(list(df_sj, df_iq))
}
# preprocess the .csv files
preprocessData(data_path = 'dengue_features_train.csv', labels_path = 'dengue_labels_train.csv') -> trains
sj_train <- trains[[1]]; iq_train <- as.data.frame(trains[2])
cc_result <- acf(sj_train,5,plot=FALSE)
## Data Loading
pkgs <- c('tidyverse', 'corrplot', 'magrittr', 'zoo',  'RColorBrewer', 'gridExtra','MASS')
invisible(lapply(pkgs, require, character.only = T))
setwd('J:/Raw/CS/Sem7/DM/project/data/original_data/')
#Train
preprocessData <- function(data_path, labels_path = NULL)
{
# load data
df <- read.csv(data_path)
# features we want
features = c("reanalysis_specific_humidity_g_per_kg", "reanalysis_dew_point_temp_k",
"station_avg_temp_c", "station_min_temp_c", "reanalysis_tdtr_k")
# fill missing values
df[features] %<>% na.locf(fromLast = TRUE)
# add city if labels data aren't provided
if (is.null(labels_path)) features %<>% c("city", "year", "weekofyear")
# select features we want
df <- df[features]
# add labels to dataframe
if (!is.null(labels_path)) df %<>% cbind(read.csv(labels_path))
# filter by city
df_sj <- filter(df, city == 'sj')
df_iq <- filter(df, city == 'iq')
# return a list with the 2 data frames
return(list(df_sj, df_iq))
}
# preprocess the .csv files
preprocessData(data_path = 'dengue_features_train.csv', labels_path = 'dengue_labels_train.csv') -> trains
sj_train <- trains[[1]]; iq_train <- as.data.frame(trains[2])
cc_result <- acf(sj_train,5,plot=FALSE)
## Data Loading
pkgs <- c('tidyverse', 'corrplot', 'magrittr', 'zoo',  'RColorBrewer', 'gridExtra','MASS')
invisible(lapply(pkgs, require, character.only = T))
setwd('J:/Raw/CS/Sem7/DM/project/data/original_data/')
#Train
preprocessData <- function(data_path, labels_path = NULL)
{
# load data
df <- read.csv(data_path)
# features we want
features = c("reanalysis_specific_humidity_g_per_kg", "reanalysis_dew_point_temp_k",
"station_avg_temp_c", "station_min_temp_c", "reanalysis_tdtr_k")
# fill missing values
df[features] %<>% na.locf(fromLast = TRUE)
# add city if labels data aren't provided
if (is.null(labels_path)) features %<>% c("city", "year", "weekofyear")
# select features we want
df <- df[features]
# add labels to dataframe
if (!is.null(labels_path)) df %<>% cbind(read.csv(labels_path))
# filter by city
df_sj <- filter(df, city == 'sj')
df_iq <- filter(df, city == 'iq')
# return a list with the 2 data frames
return(list(df_sj, df_iq))
}
# preprocess the .csv files
preprocessData(data_path = 'dengue_features_train.csv', labels_path = 'dengue_labels_train.csv') -> trains
sj_train <- trains[[1]]; iq_train <- as.data.frame(trains[2])
cc_result <- acf(sj_train,5,plot=FALSE)
## Data Loading
pkgs <- c('tidyverse', 'corrplot', 'magrittr', 'zoo',  'RColorBrewer', 'gridExtra','MASS')
invisible(lapply(pkgs, require, character.only = T))
setwd('J:/Raw/CS/Sem7/DM/project/data/original_data/')
#Train
preprocessData <- function(data_path, labels_path = NULL)
{
# load data
df <- read.csv(data_path)
# features we want
features = c("reanalysis_specific_humidity_g_per_kg", "reanalysis_dew_point_temp_k",
"station_avg_temp_c", "station_min_temp_c", "reanalysis_tdtr_k")
# fill missing values
df[features] %<>% na.locf(fromLast = TRUE)
# add city if labels data aren't provided
if (is.null(labels_path)) features %<>% c("city", "year", "weekofyear")
# select features we want
df <- df[features]
# add labels to dataframe
if (!is.null(labels_path)) df %<>% cbind(read.csv(labels_path))
# filter by city
df_sj <- filter(df, city == 'sj')
df_iq <- filter(df, city == 'iq')
# return a list with the 2 data frames
return(list(df_sj, df_iq))
}
# preprocess the .csv files
preprocessData(data_path = 'dengue_features_train.csv', labels_path = 'dengue_labels_train.csv') -> trains
sj_train <- trains[[1]]; iq_train <- as.data.frame(trains[2])
cc_result <- acf(sj_train,5,plot=FALSE)
## Data Loading
pkgs <- c('tidyverse', 'corrplot', 'magrittr', 'zoo',  'RColorBrewer', 'gridExtra','MASS')
invisible(lapply(pkgs, require, character.only = T))
setwd('J:/Raw/CS/Sem7/DM/project/data/original_data/')
#Train
preprocessData <- function(data_path, labels_path = NULL)
{
# load data
df <- read.csv(data_path)
# features we want
features = c("reanalysis_specific_humidity_g_per_kg", "reanalysis_dew_point_temp_k",
"station_avg_temp_c", "station_min_temp_c", "reanalysis_tdtr_k")
# fill missing values
df[features] %<>% na.locf(fromLast = TRUE)
# add city if labels data aren't provided
if (is.null(labels_path)) features %<>% c("city", "year", "weekofyear")
# select features we want
df <- df[features]
# add labels to dataframe
if (!is.null(labels_path)) df %<>% cbind(read.csv(labels_path))
# filter by city
df_sj <- filter(df, city == 'sj')
df_iq <- filter(df, city == 'iq')
# return a list with the 2 data frames
return(list(df_sj, df_iq))
}
# preprocess the .csv files
preprocessData(data_path = 'dengue_features_train.csv', labels_path = 'dengue_labels_train.csv') -> trains
sj_train <- trains[[1]]; iq_train <- as.data.frame(trains[2])
cc_result <- acf(sj_train,5,plot=FALSE)
## Data Loading
pkgs <- c('tidyverse', 'corrplot', 'magrittr', 'zoo',  'RColorBrewer', 'gridExtra','MASS')
invisible(lapply(pkgs, require, character.only = T))
setwd('J:/Raw/CS/Sem7/DM/project/data/original_data/')
#Train
preprocessData <- function(data_path, labels_path = NULL)
{
# load data
df <- read.csv(data_path)
# features we want
features = c("reanalysis_specific_humidity_g_per_kg", "reanalysis_dew_point_temp_k",
"station_avg_temp_c", "station_min_temp_c", "reanalysis_tdtr_k")
# fill missing values
df[features] %<>% na.locf(fromLast = TRUE)
# add city if labels data aren't provided
if (is.null(labels_path)) features %<>% c("city", "year", "weekofyear")
# select features we want
df <- df[features]
# add labels to dataframe
if (!is.null(labels_path)) df %<>% cbind(read.csv(labels_path))
# filter by city
df_sj <- filter(df, city == 'sj')
df_iq <- filter(df, city == 'iq')
# return a list with the 2 data frames
return(list(df_sj, df_iq))
}
# preprocess the .csv files
preprocessData(data_path = 'dengue_features_train.csv', labels_path = 'dengue_labels_train.csv') -> trains
sj_train <- trains[[1]]; iq_train <- as.data.frame(trains[2])
# summary(sj_train)
# summary(iq_train)
# split up the data
sj_train_subtrain <- head(sj_train, 800)
sj_train_subtest  <- tail(sj_train, nrow(sj_train) - 800)
iq_train_subtrain <- head(iq_train, 400)
iq_train_subtest  <- tail(iq_train, nrow(sj_train) - 400)
# function that returns Mean Absolute Error
mae <- function(error) return(mean(abs(error)) )
get_bst_model <- function(train, test)
{
# Step 1: specify the form of the model
form <- "total_cases ~ 1 +
reanalysis_specific_humidity_g_per_kg +
reanalysis_dew_point_temp_k +
station_avg_temp_c +
station_min_temp_c +
reanalysis_tdtr_k"
grid = 10 ^(seq(-8, -3,1))
best_alpha = c()
best_score = 1000
# Step 2: Find the best hyper parameter, alpha
for (i in grid)
{
model = glm.nb(formula = form,
data = train,
init.theta = i)
results <-  predict(model, test)
score   <-  mae(test$total_cases - results)
if (score < best_score) {
best_alpha <- i
best_score <- score
cat('\nbest score = ', best_score, '\twith alpha = ', best_alpha)
}
}
# Step 3: refit on entire dataset
combined <- rbind(train, test)
combined_model = glm.nb(formula=form,
data = combined,
init.theta = best_alpha)
return (combined_model)
}
sj_model <- get_bst_model(sj_train_subtrain, sj_train_subtest)
iq_model <- get_bst_model(iq_train_subtrain, iq_train_subtest)
# plot sj
sj_train$fitted = predict(sj_model, sj_train, type = 'response')
sj_train %>%
mutate(index = as.numeric(row.names(.))) %>%
ggplot(aes(x = index)) + ggtitle("San Jose") +
geom_line(aes(y = total_cases, colour = "total_cases")) +
geom_line(aes(y = fitted, colour = "fitted"))
# plot iq
iq_train$fitted = predict(iq_model, iq_train, type = 'response')
iq_train %>%
mutate(index = as.numeric(row.names(.))) %>%
ggplot(aes(x = index)) + ggtitle("Iquitos") +
geom_line(aes(y = total_cases, colour = "total_cases")) +
geom_line(aes(y = fitted, colour = "fitted"))
# submitting the predictions
tests <- preprocessData('dengue_features_test.csv')
sj_test <- tests[[1]]; iq_test <- tests[[2]]
sj_test$predicted = predict(sj_model , sj_test, type = 'response')
iq_test$predicted = predict(iq_model , iq_test, type = 'response')
submissions = read.csv('submission_format.csv')
inner_join(submissions, rbind(sj_test,iq_test)) %>%
dplyr::select(city, year, weekofyear, total_cases = predicted) ->
predictions
predictions$total_cases %<>% round()
write.csv(predictions, 'submissions/predictions.csv', row.names = FALSE)
## Data Loading
pkgs <- c('tidyverse', 'corrplot', 'magrittr', 'zoo',  'RColorBrewer', 'gridExtra','MASS')
invisible(lapply(pkgs, require, character.only = T))
setwd('J:/Raw/CS/Sem7/DM/project/data/original_data/')
#Train
preprocessData <- function(data_path, labels_path = NULL)
{
# load data
df <- read.csv(data_path)
# features we want
features = c("reanalysis_specific_humidity_g_per_kg", "reanalysis_dew_point_temp_k",
"station_avg_temp_c", "station_min_temp_c", "reanalysis_tdtr_k")
# fill missing values
df[features] %<>% na.locf(fromLast = TRUE)
# add city if labels data aren't provided
if (is.null(labels_path)) features %<>% c("city", "year", "weekofyear")
# select features we want
df <- df[features]
# add labels to dataframe
if (!is.null(labels_path)) df %<>% cbind(read.csv(labels_path))
# filter by city
df_sj <- filter(df, city == 'sj')
df_iq <- filter(df, city == 'iq')
# return a list with the 2 data frames
return(list(df_sj, df_iq))
}
# preprocess the .csv files
preprocessData(data_path = 'dengue_features_train.csv', labels_path = 'dengue_labels_train.csv') -> trains
sj_train <- trains[[1]]; iq_train <- as.data.frame(trains[2])
# summary(sj_train)
# summary(iq_train)
# split up the data
sj_train_subtrain <- head(sj_train, 800)
sj_train_subtest  <- tail(sj_train, nrow(sj_train) - 800)
iq_train_subtrain <- head(iq_train, 400)
iq_train_subtest  <- tail(iq_train, nrow(sj_train) - 400)
# function that returns Mean Absolute Error
mae <- function(error) return(mean(abs(error)) )
get_bst_model <- function(train, test)
{
# Step 1: specify the form of the model
form <- "total_cases ~ 1 +
reanalysis_specific_humidity_g_per_kg +
reanalysis_dew_point_temp_k +
station_avg_temp_c +
station_min_temp_c +
reanalysis_tdtr_k"
grid = 10 ^(seq(-8, -3,1))
best_alpha = c()
best_score = 1000
# Step 2: Find the best hyper parameter, alpha
for (i in grid)
{
model = glm.nb(formula = form,
data = train,
init.theta = i)
results <-  predict(model, test)
score   <-  mae(test$total_cases - results)
if (score < best_score) {
best_alpha <- i
best_score <- score
cat('\nbest score = ', best_score, '\twith alpha = ', best_alpha)
}
}
# Step 3: refit on entire dataset
combined <- rbind(train, test)
combined_model = glm.nb(formula=form,
data = combined,
init.theta = best_alpha)
return (combined_model)
}
sj_model <- get_bst_model(sj_train_subtrain, sj_train_subtest)
iq_model <- get_bst_model(iq_train_subtrain, iq_train_subtest)
# plot sj
sj_train$fitted = predict(sj_model, sj_train, type = 'response')
sj_train %>%
mutate(index = as.numeric(row.names(.))) %>%
ggplot(aes(x = index)) + ggtitle("San Jose") +
geom_line(aes(y = total_cases, colour = "total_cases")) +
geom_line(aes(y = fitted, colour = "fitted"))
# plot iq
iq_train$fitted = predict(iq_model, iq_train, type = 'response')
iq_train %>%
mutate(index = as.numeric(row.names(.))) %>%
ggplot(aes(x = index)) + ggtitle("Iquitos") +
geom_line(aes(y = total_cases, colour = "total_cases")) +
geom_line(aes(y = fitted, colour = "fitted"))
# submitting the predictions
tests <- preprocessData('dengue_features_test.csv')
sj_test <- tests[[1]]; iq_test <- tests[[2]]
sj_test$predicted = predict(sj_model , sj_test, type = 'response')
iq_test$predicted = predict(iq_model , iq_test, type = 'response')
submissions = read.csv('submission_format.csv')
inner_join(submissions, rbind(sj_test,iq_test)) %>%
dplyr::select(city, year, weekofyear, total_cases = predicted) ->
predictions
predictions$total_cases %<>% round()
write.csv(predictions, 'submissions/predictions.csv', row.names = FALSE)
## Data Loading
pkgs <- c('tidyverse', 'corrplot', 'magrittr', 'zoo',  'RColorBrewer', 'gridExtra','MASS')
invisible(lapply(pkgs, require, character.only = T))
setwd('J:/Raw/CS/Sem7/DM/project/data/original_data/')
## Data Loading
train_features = read.csv('dengue_features_train.csv')
train_labels   = read.csv('dengue_labels_train.csv')
head(train_features[1:8])
# Seperate data by city
sj_train_features = train_features %>% filter(city == 'sj')
sj_train_labels   = train_labels   %>% filter(city == 'sj')
iq_train_features = train_features %>% filter(city == 'iq')
iq_train_labels   = train_labels   %>% filter(city == 'iq')
# data shape for each city
cat('\nSan Juan\n',
'\t features: ', sj_train_features %>% ncol,
'\t entries: ' , sj_train_features %>% nrow,
'\t labels: '  , sj_train_labels %>% nrow)
cat('\nIquitos\n',
'\t features: ', iq_train_features %>% ncol,
'\t entries: ' , iq_train_features %>% nrow,
'\t labels: '  , iq_train_labels %>% nrow)
sj_train_features %<>% dplyr::select(-week_start_date)
iq_train_features %<>% dplyr::select(-week_start_date)
#
# apply(sj_train_features, 2, function(x)
#   round(100 * (length(which(is.na(x))))/length(x) , digits = 1)) %>%
#   as.data.frame() %>%
#   `names<-`('Percent of Missing Values')
allFIelds <- colnames(sj_train_features)
# impute NAs by the latest value
sj_train_features[allFIelds] %<>% na.locf(fromLast = TRUE)
iq_train_features[allFIelds] %<>% na.locf(fromLast = TRUE)
sj_train_features %>%
mutate(index = as.numeric(row.names(.))) %>%
ggplot(aes(index, ndvi_ne)) +
geom_line(colour = 'dodgerblue') +
ggtitle("Vegetation Index over Time")
# total cases of dengue: histograms
rbind(iq_train_labels, sj_train_labels) %>%
ggplot(aes(x = total_cases,fill = ..count..)) +
geom_histogram(bins = 12, colour = 'black') + ggtitle('Total Cases of Dengue') +
scale_y_continuous(breaks = seq(0,700,100)) + facet_wrap(~city)
# corerlations between features
sj_train_features %<>% mutate('total_cases' = sj_train_labels$total_cases)
iq_train_features %<>% mutate('total_cases' = iq_train_labels$total_cases)
# plot san juan correlation matrix
sj_train_features %>%
dplyr::select(-city, -year, -weekofyear) %>%
cor(use = 'pairwise.complete.obs') -> M1
corrplot(M1, type="lower", method="color",
col=brewer.pal(n=8, name="RdBu"),diag=FALSE)
# plot iquitos correlation matrix
iq_train_features %>%
dplyr::select(-city, -year, -weekofyear) %>%
cor(use = 'pairwise.complete.obs') -> M2
corrplot(M2, type="lower", method="color",
col=brewer.pal(n=8, name="RdBu"),diag=FALSE)
# see the correlations as barplot
sort(M1[21,-21]) %>%
as.data.frame %>%
`names<-`('correlation') %>%
ggplot(aes(x = reorder(row.names(.), -correlation), y = correlation, fill = correlation)) +
geom_bar(stat='identity', colour = 'black') + scale_fill_continuous(guide = FALSE) + scale_y_continuous(limits =  c(-.15,.25)) +
labs(title = 'San Jose\n Correlations', x = NULL, y = NULL) + coord_flip() -> cor1
# can use ncol(M1) instead of 21 to generalize the code
sort(M2[21,-21]) %>%
as.data.frame %>%
`names<-`('correlation') %>%
ggplot(aes(x = reorder(row.names(.), -correlation), y = correlation, fill = correlation)) +
geom_bar(stat='identity', colour = 'black') + scale_fill_continuous(guide = FALSE) + scale_y_continuous(limits =  c(-.15,.25)) +
labs(title = 'Iquitos\n Correlations', x = NULL, y = NULL) + coord_flip() -> cor2
grid.arrange(cor1, cor2, nrow = 1)
ccf(sj_train_features$reanalysis_specific_humidity_g_per_kg,sj_train_labels$total_cases)
pkgs <- c('tidyverse', 'corrplot', 'magrittr', 'zoo',  'RColorBrewer', 'gridExtra','MASS')
## Data Loading
pkgs <- c('tidyverse', 'corrplot', 'magrittr', 'zoo',  'RColorBrewer', 'gridExtra','MASS')
invisible(lapply(pkgs, require, character.only = T))
setwd('J:/Raw/CS/Sem7/DM/project/data/original_data/')
#Train
preprocessData <- function(data_path, labels_path = NULL)
{
# load data
df <- read.csv(data_path)
# features we want
features = c("reanalysis_specific_humidity_g_per_kg", "reanalysis_dew_point_temp_k",
"station_avg_temp_c", "station_min_temp_c", "reanalysis_tdtr_k")
# fill missing values
df[features] %<>% na.locf(fromLast = TRUE)
# add city if labels data aren't provided
if (is.null(labels_path)) features %<>% c("city", "year", "weekofyear")
# select features we want
df <- df[features]
# add labels to dataframe
if (!is.null(labels_path)) df %<>% cbind(read.csv(labels_path))
# filter by city
df_sj <- filter(df, city == 'sj')
df_iq <- filter(df, city == 'iq')
# return a list with the 2 data frames
return(list(df_sj, df_iq))
}
# preprocess the .csv files
preprocessData(data_path = 'dengue_features_train.csv', labels_path = 'dengue_labels_train.csv') -> trains
sj_train <- trains[[1]]; iq_train <- as.data.frame(trains[2])
cc_result <- acf(sj_train,5,plot=FALSE)
cc_result <- acf(sj_train,5,plot=TRUE)
## Data Loading
pkgs <- c('tidyverse', 'corrplot', 'magrittr', 'zoo',  'RColorBrewer', 'gridExtra','MASS')
invisible(lapply(pkgs, require, character.only = T))
setwd('J:/Raw/CS/Sem7/DM/project/data/original_data/')
#Train
preprocessData <- function(data_path, labels_path = NULL)
{
# load data
df <- read.csv(data_path)
# features we want
features = c("reanalysis_specific_humidity_g_per_kg", "reanalysis_dew_point_temp_k",
"station_avg_temp_c", "station_min_temp_c", "reanalysis_tdtr_k")
# fill missing values
df[features] %<>% na.locf(fromLast = TRUE)
# add city if labels data aren't provided
if (is.null(labels_path)) features %<>% c("city", "year", "weekofyear")
# select features we want
df <- df[features]
# add labels to dataframe
if (!is.null(labels_path)) df %<>% cbind(read.csv(labels_path))
# filter by city
df_sj <- filter(df, city == 'sj')
df_iq <- filter(df, city == 'iq')
# return a list with the 2 data frames
return(list(df_sj, df_iq))
}
# preprocess the .csv files
preprocessData(data_path = 'dengue_features_train.csv', labels_path = 'dengue_labels_train.csv') -> trains
sj_train <- trains[[1]]; iq_train <- as.data.frame(trains[2])
cc_result <- acf(sj_train,5,plot=TRUE)
